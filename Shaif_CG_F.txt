#include<windows.h>

#include<mmsystem.h>

#include<GL\glut.h>

#include <GL/glu.h>

#include<math.h>

#include <stdlib.h>

#include<stdio.h>

#define PI 3.1416


    GLint i, j, k,x=0,y=0,speed=0,alt=0,n1=1000,n2=1100,s1=0,s2=1,s3=1;

    GLfloat sun_spin=0, sun_x=0, sun_y=0,reduce=10;

    GLfloat ax=0,bx=0,cx=0,dx=0,str=500.0,mn=500.0;

    GLfloat sr=0.0,sg=0.749,sb=1.0;


bool condition=false;

    GLfloat position = 0.0f;

    GLfloat _move =5.0f;

    GLfloat position1 = 0.0f;

    GLfloat _move1 =3.0f;

    GLfloat position2 = 400.0f;

    GLfloat _move2 =3.0f;


void init(void)

{

	glClearColor(0,181,226,0);

	glMatrixMode(GL_PROJECTION);

	gluOrtho2D(0.0, 1000.0, 0.0, 700.0);

}



float r(int a)
{

    return x=4,y=8;
}


float r(int a,int b)
{

    return x=0,y=0;

}


void updatey(int value)
{
    y= 8.0f;

    glutPostRedisplay();
    glutTimerFunc(100, updatey, 0);
}


void updatex(int value)
{
    x=4.0f;

    glutPostRedisplay();

    glutTimerFunc(100, updatex, 0);

}


///*** Circle_Model***///

void circle(GLdouble rad)

{

   glBegin(GL_POLYGON);

    {

      	for(int i=0;i<50;i++)

        {

            float pi=3.1416;

            float A=(i*2*pi)/50;

            float r=rad;

            float x = r * cos(A);



            float y = r * sin(A);

            glVertex2f(x,y );

        }

    }

    glEnd();

}


void circle1(GLdouble rad)

{
    glBegin(GL_POLYGON);

    {

      	for(int i=0;i<200;i++)

        {
            float pi=3.1416;

            float A=(i*2*pi)/200;

            float r=rad;

            float x = r * cos(A);

            float y = r+10 * sin(A);

            glVertex2f(x,y );

        }

    }

    glEnd();

}




void update2(int value)
{

    if(position2 <-1.3)

    {
        position2 -= _move2;

    }

	glutPostRedisplay(); //Notify GLUT that the display has changed

	glutTimerFunc(20, update2, 0); //Notify GLUT to call update again in 25 milliseconds

}


void lightHouse()
{
        glColor3ub(255.0f,171.0f,0.0f);
    glBegin(GL_POLYGON);
    glVertex2f(905.0f,0.0f);
    glVertex2f(950.0f,0.0f);
    glVertex2f(950.0f,200.0f);
    glVertex2f(905.0f,200.0f);
    glEnd();

    glColor3ub(255.0f,210.0f,0.0f);
    glBegin(GL_POLYGON);
    glVertex2f(905.0f,200.0f);
    glVertex2f(950.0f,200.0f);
    glVertex2f(965.0f,210.0f);
    glVertex2f(900.0f,210.0f);
    glEnd();

    glColor3ub(204.0f,110.0f,0.0f);
    glBegin(GL_POLYGON);
    glVertex2f(906.0f,210.0f);
    glVertex2f(949.0f,210.0f);
    glVertex2f(949.0f,240.0f);
    glVertex2f(906.0f,240.0f);
    glEnd();

    glColor3ub(255.0f,255.0f,255.0f);
    glBegin(GL_POLYGON);
    glVertex2f(926.5f,240.0f);
    glVertex2f(932.0f,260.0f);
    glVertex2f(926.5f,280.0f);
    glVertex2f(921.0f,260.0f);
    glEnd();

}

///Beach_Model

void beach()
{

    ///beach
    glPushMatrix();
	glBegin(GL_POLYGON);

    glColor3ub(238,233,244);
	glVertex2i(900, 350);

	glColor3ub(238,233,244);
	glVertex2i(850, 330);

	glColor3ub(238,233,244);
	glVertex2i(800, 300);

	glColor3ub(238,233,244);
	glVertex2i(750, 270);

	glColor3ub(238,233,244);
	glVertex2i(700, 240);

	glColor3ub(163,124,87);
	glVertex2i(650, 220);

	glColor3ub(163,124,87);
	glVertex2i(620, 200);

    glColor3ub(115,118,112);
	glVertex2i(400,0);

    glColor3ub(163,124,87);
	glVertex2i(1000,0);

    glColor3ub(115,118,112);
	glVertex2i(1000, 375);


	glEnd();

	glPopMatrix();


	 ///Sea 0.7/0.4/0.4


	glBegin(GL_POLYGON);
	glColor3ub(149,164,210);
    glVertex2i(0,250);

    glColor3ub(9,152,219);
	glVertex2i(0,0);

	glColor3ub(9,152,219);
	glVertex2i(400,0);

	glColor3ub(9,152,219);
	glVertex2i(620,200);

	glColor3ub(9,152,219);
	glVertex2i(650,220);

    glColor3ub(9,152,219);
	glVertex2i(700,240);

	glColor3ub(9,152,219);
	glVertex2i(750,270);

	glColor3ub(238,233,244);
	glVertex2i(800,300);

	glColor3ub(238,233,244);
	glVertex2i(850,330);

	glColor3ub(238,233,244);
	glVertex2i(900,350);



	glEnd();
}





bool con(){

return condition=true;

}


float updatex()
{

  return   n1=-700,s1=241,s2=240,s3=236;

}

float updatex1()
{

  return   n1=1000,s1=0,s2=1,s3=1;

}


void night(){


glColor3f(.0, 0.0, 0.0);


    glPushMatrix();

    glBegin(GL_POLYGON);

    glVertex3i(0,n1,0);

    glVertex3i(0,1000, 0);

    glVertex3i(1200,1000, 0);

    glVertex3i(1200,n1, 0);

    glPopMatrix();

    glEnd();

}




///Display Function


void display(void)

{

	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(0.0, 0.0, 1.0);


    night();

    star();

    planePosition();

    Hill_Right_Bottom();

    Hill_Small_One();

    cloud_three();

    cloud_four();

    cloud_one();

    cloud_two();

    cloud_five();

    cloud_six();

    beach();

    Boat();
    lightHouse();

	glFlush();

}



///Speed & Movement

void move_right(){

    ax = ax + .05;
    bx = bx + .08;
    cx = cx + .10;
    dx = dx + .15;

    if(cx>1000){
        cx = -300;
    }
    if(bx>1000){
            bx= -400;

    }
    if(cx>1000){
            cx= -400;

    }
    if(dx>1000){
            dx= -500;

    }


    glutPostRedisplay();
}




void mouse(int key, int state, int x, int y){

    switch (key)

    {

    case GLUT_LEFT_BUTTON:

        if (state == GLUT_DOWN)

        {

            glutIdleFunc(move_right);

        }

        break;

    case GLUT_MIDDLE_BUTTON:

    case GLUT_RIGHT_BUTTON:

        if (state == GLUT_DOWN)

        {

            glutIdleFunc(NULL);

        }

        break;

    default:

        break;

    }



}

void handleKeypress(unsigned char key, int x, int y) {

	switch (key) {


  case 'n':

    updatex();

    condition=true;

    break;



   case 'd':

       updatex1();

       condition=false;

   break;

   glutPostRedisplay();

}

}

int main(int argc, char** argv)

{

	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

	glutInitWindowPosition(22, 30);

	glutInitWindowSize(1500, 750);

	glutCreateWindow("Sea_Beach With_Mountain");

	init();

	glutDisplayFunc(display);

	glutTimerFunc(20, update, 0);

	glutTimerFunc(20, update1, 0);

	glutTimerFunc(20, update2, 0);


    glutMouseFunc(mouse);

    glutKeyboardFunc(handleKeypress);

	glutMainLoop();

}
