    ///Boat

void Boat()
{

     glPushMatrix();

     glTranslatef(position,0.0f,0.0f);

     glTranslatef(-70,0.0f,0.0f);


    //bottom
    glBegin(GL_POLYGON);

	glColor3f(0.0, 0.0, 0.0);

	glVertex2i(200,50);

	glVertex2i(100, 100);

	glVertex2i(400,100);

	glVertex2i(300,50);

    glEnd();


    glBegin(GL_POLYGON);

	glColor3ub(100.0, 105.0, 4.0);

	glVertex2i(230,100);

	glVertex2i(230, 150);

	glVertex2i(320,150);

	glVertex2i(320,100);

    glEnd();


    glBegin(GL_POLYGON);

	glColor3f(0.0, 0.0, 0.0);

	glVertex2i(360,140);

	glVertex2i(350, 80);

	glVertex2i(360,50);

    glEnd();


    glPopMatrix();

}


void update(int value)
{

    if(position <-300.0)

        position = 1500.0f;

    position -= _move;

	glutPostRedisplay();

	glutTimerFunc(50, update, 0);
}



/// Tree_Model

void Tree_Model_One()
{

    glPushMatrix();

    glTranslatef(110,110,0);

    circle(15);

    glPopMatrix();

    glPushMatrix();

    glTranslatef(110,100,0);

    circle(15);

    glPopMatrix();

    glBegin(GL_POLYGON);

    glColor3ub(27.0, 38,49);

	glVertex2f(109, 70);

	glVertex2f(109, 90);

	glVertex2f(111, 90);

	glVertex2f(111, 70);

    glEnd();


}

void Tree_Model_Two()
{

    glPushMatrix();

    glTranslatef(130,130,0);

    circle(5);

    glPopMatrix();

    glPushMatrix();

    glTranslatef(125,126,0);

    circle(5);

    glPopMatrix();



    glPushMatrix();

    glTranslatef(135,126,0);

    circle(5);

    glPopMatrix();



    glPushMatrix();

    glTranslatef(130,125,0);

    circle(5);

    glPopMatrix();



    glBegin(GL_POLYGON);

    glColor3ub(27, 38, 49);

	glVertex2f(129, 110);

	glVertex2f(129, 124);

	glVertex2f(131, 124);

	glVertex2f(131, 110);


    glEnd();

}


void Tree_Model_Three()
{

    glBegin(GL_POLYGON);

	glVertex2f(125, 123);

	glVertex2f(133, 145);

	glVertex2f(141, 123);

	glEnd();


    glBegin(GL_POLYGON);

    glColor3ub(27, 38, 49);

	glVertex2f(132, 110);

	glVertex2f(132, 124);

	glVertex2f(134, 124);

	glVertex2f(134, 110);

    glEnd();

}

void star()
{

   if ( condition==true)

   {

        glBegin(GL_POINTS);              // Each set of 4 vertices form a quad

        glColor3ub(247, 249, 249); // Red

        glVertex2f(500.1f, 500.3f);    // x, y

        glVertex2f( 550.1f, 504.0f);

        glVertex2f( 150.1f, 504.0f);

        glVertex2f( 310.1f, 504.0f);

        glVertex2f( 261.0f, 505.0f);

        glVertex2f( 453.1f, 506.0f);

        glVertex2f( 616.1f, 507.0f);

        glVertex2f( 763.1f, 508.0f);

        glVertex2f( 587.1f, 524.0f);

        glVertex2f( 954.1f, 574.0f);

        glVertex2f( 231.1f, 585.0f);

        glVertex2f( 275.1f, 566.0f);

        glVertex2f( 852.1f, 557.0f);

        glVertex2f( 476.1f, 548.0f);

        glVertex2f( 140.1f, 509.0f);

        glVertex2f( 350.1f, 510.0f);

        glVertex2f( 061.1f, 511.0f);

        glVertex2f( 463.1f, 512.0f);

        glVertex2f( 822.1f, 513.0f);

        glVertex2f( 110.1f, 514.0f);

        glVertex2f( 966.1f, 515.0f);

        glVertex2f( 211.1f, 516.0f);

        glVertex2f( 313.1f, 517.0f);

        glVertex2f( 869.1f, 518.0f);

        glVertex2f( 639.1f, 519.0f);

        glVertex2f( 106.1f, 520.0f);

        glVertex2f( 140.1f, 709.0f);

        glVertex2f( 350.1f, 810.0f);

        glVertex2f( 061.1f, 911.0f);

        glVertex2f( 463.1f, 412.0f);

        glVertex2f( 822.1f, 713.0f);

        glVertex2f( 110.1f, 614.0f);

        glVertex2f( 966.1f, 815.0f);

        glVertex2f( 211.1f, 916.0f);

        glVertex2f( 313.1f, 1017.0f);

        glVertex2f( 869.1f, 718.0f);

        glVertex2f( 639.1f, 919.0f);

        glVertex2f( 106.1f, 902.0f);

        glVertex2f( 106.1f, 908.0f);

         glVertex2f( 106.1f, 620.0f);

         glVertex2f( 250.1f, 630.0f);

         glVertex2f( 106.1f, 906.0f);

         glVertex2f( 116.1f, 530.0f);

         glVertex2f( 980.1f, 980.0f);

          glVertex2f( 900.1f, 930.0f);

         glVertex2f( 858.1f, 666.0f);

         glVertex2f( 845.1f, 642.0f);

         glVertex2f( 900.1f, 900.0f);

         glVertex2f( 910.1f, 903.0f);

         glVertex2f( 915.1f, 908.0f);

         glVertex2f( 919.1f, 920.0f);

         glVertex2f( 930.1f, 903.0f);

         glVertex2f( 935.1f, 905.0f);

         glVertex2f( 940.1f, 905.0f);

         glVertex2f( 945.1f, 910.0f);

         glVertex2f( 600.1f, 525.0f);

         glVertex2f( 650.1f, 535.0f);

        glVertex2f( 690.1f, 490.0f);

        glVertex2f( 550.1f, 600.0f);

        glVertex2f( 500.1f, 600.0f);


        glEnd();

}

}

bool con(){

return condition=true;

}


float updatex()
{

  return   n1=-700,s1=241,s2=240,s3=236;

}

float updatex1()
{

  return   n1=1000,s1=0,s2=1,s3=1;

}


void night(){


glColor3f(.0, 0.0, 0.0);


    glPushMatrix();

    glBegin(GL_POLYGON);

    glVertex3i(0,n1,0);

    glVertex3i(0,1000, 0);

    glVertex3i(1200,1000, 0);

    glVertex3i(1200,n1, 0);

    glPopMatrix();

    glEnd();

}

//Tree_1

void Tree_One(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(0,200,0);

    Tree_Model_One();

    glPopMatrix();

}



///Tree_2

void Tree_Two(){

     glColor3ub(46, 204, 13.0);

     glPushMatrix();

     glTranslatef(540,200,0);

     Tree_Model_One();

     glPopMatrix();

}

///Tree_3

void Tree_Three(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(750,200,0);

    Tree_Model_One();

    glPopMatrix();

}

///Tree_4

void Tree_Four(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(292,240,0);

    Tree_Model_One();

    glPopMatrix();

}



///Tree_5

void Tree_Five(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(30,180,0);//-20

    Tree_Model_Two();

    glPopMatrix();

}



///Tree_6

void Tree_Six(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(50,190,0);//-10

    Tree_Model_Two();

    glPopMatrix();

}

///Tree_7

void Tree_Seven(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(322,200,0);

    Tree_Model_Two();

    glPopMatrix();

}



///Tree_8

void Tree_Eight(){

     glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(350,185,0);

    Tree_Model_Two();

    glPopMatrix();

}



///Tree_12

void Tree_Twelve(){

    glColor3ub(46, 204, 13.0);

    glPushMatrix();

    glTranslatef(408,178,0);//-22

    Tree_Model_Three();

    glPopMatrix();

}

void tree(){

    glColor3f(0.11, 0.23, 0.36);

    glPushMatrix();

    glTranslatef(-120,-110,0);//-90

    Windmill();

    glPopMatrix();

}


void display(void)

{

	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(0.0, 0.0, 1.0);

    night();
    
    tree();   

    Tree_One();

    Tree_Two();

    Tree_Three();

    Tree_Four();

    Tree_Five();

    Tree_Six();

    Tree_Seven();

    Tree_Eight();

    Tree_Twelve();
    
    Boat();

	glFlush();

}



///Speed & Movement

void move_right(){



    spin = spin +.1;
    ax = ax + .05;
    bx = bx + .08;
    cx = cx + .10;
    dx = dx + .15;

    if(cx>1000){
        cx = -300;
    }
    if(bx>1000){
            bx= -400;

    }
    if(cx>1000){
            cx= -400;

    }
    if(dx>1000){
            dx= -500;

    }


    glutPostRedisplay();
}




void mouse(int key, int state, int x, int y){

    switch (key)

    {

    case GLUT_LEFT_BUTTON:

        if (state == GLUT_DOWN)

        {

            glutIdleFunc(move_right);

        }

        break;

    case GLUT_MIDDLE_BUTTON:

    case GLUT_RIGHT_BUTTON:

        if (state == GLUT_DOWN)

        {

            glutIdleFunc(NULL);

        }

        break;

    default:

        break;

    }



}

void handleKeypress(unsigned char key, int x, int y) {

	switch (key) {


  case 'n':

    updatex();

    condition=true;

    break;



   case 'd':

       updatex1();

       condition=false;

   break;

   glutPostRedisplay();

}

}

int main(int argc, char** argv)

{

	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

	glutInitWindowPosition(22, 30);

	glutInitWindowSize(1500, 750);

	glutCreateWindow("Sea_Beach With_Mountain");

	init();

	glutDisplayFunc(display);

	glutTimerFunc(20, update, 0);

	glutTimerFunc(20, update1, 0);

	glutTimerFunc(20, update2, 0);


    glutMouseFunc(mouse);

    glutKeyboardFunc(handleKeypress);

	glutMainLoop();

}
